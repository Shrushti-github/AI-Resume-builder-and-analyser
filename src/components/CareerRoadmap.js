import React, { useState, useEffect } from 'react';
import '../styles/CareerRoadmap.css';

const CareerRoadmap = ({ user }) => {
  const [roadmapData, setRoadmapData] = useState(null);
  const [loading, setLoading] = useState(false);
  const [formData, setFormData] = useState({
    targetRole: '',
    currentLevel: user.experienceLevel || 'Beginner',
    timeframe: 12
  });
  const [skills, setSkills] = useState([]);
  const [trends, setTrends] = useState(null);

  useEffect(() => {
    if (roadmapData) {
      fetchCareerTrends(formData.targetRole);
    }
  }, [roadmapData, formData.targetRole]);

  // Add these handler functions after the existing functions
  const handleDownloadPDF = () => {
    // Create a simple PDF download functionality
    const element = document.createElement('a');
    const content = `
Career Roadmap for ${formData.targetRole || roadmapData?.currentLevel}

Current Level: ${roadmapData?.currentLevel}
Target Level: ${roadmapData?.nextLevel}
Timeframe: ${roadmapData?.estimatedTimeframe} months

Skills to Master:
${roadmapData?.skillsToLearn?.map(skill => `• ${skill}`).join('\n') || 'N/A'}

Learning Resources:
${roadmapData?.resources?.map(resource => `• ${resource.title} (${resource.type}): ${resource.url}`).join('\n') || 'N/A'}

Milestones:
${roadmapData?.milestones?.map((milestone, index) => `${index + 1}. ${milestone.title} - ${milestone.description}`).join('\n') || 'N/A'}

Generated by AI Career Assistant
`;
    const file = new Blob([content], { type: 'text/plain' });
    element.href = URL.createObjectURL(file);
    element.download = `career-roadmap-${roadmapData?.currentLevel || 'plan'}.txt`;
    document.body.appendChild(element);
    element.click();
    document.body.removeChild(element);
    alert('Roadmap downloaded successfully!');
  };

  const handleEmailRoadmap = () => {
    const subject = encodeURIComponent(`Career Roadmap: ${roadmapData?.currentLevel} to ${roadmapData?.nextLevel}`);
    const body = encodeURIComponent(`
Hi,

Here's my personalized career roadmap:

Current Level: ${roadmapData?.currentLevel}
Target Level: ${roadmapData?.nextLevel}
Timeframe: ${roadmapData?.estimatedTimeframe} months

Skills to Master:
${roadmapData?.skillsToLearn?.map(skill => `• ${skill}`).join('\n') || 'N/A'}

Best regards,
Generated by AI Career Assistant
    `);
    
    window.open(`mailto:?subject=${subject}&body=${body}`, '_blank');
    alert('Email client opened with your roadmap!');
  };

  const handleUpdateProgress = async () => {
    try {
      // Mock progress update
      const updatedMilestones = roadmapData?.milestones?.map((milestone, index) => ({
        ...milestone,
        completed: index === 0 ? true : milestone.completed // Mark first milestone as completed
      }));
      
      setRoadmapData(prev => ({
        ...prev,
        milestones: updatedMilestones
      }));
      
      alert('Progress updated successfully! First milestone marked as completed.');
    } catch (error) {
      alert('Error updating progress. Please try again.');
    }
  };

  const fetchCareerTrends = async (role) => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(`http://localhost:5000/api/career/trends/${encodeURIComponent(role)}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        setTrends(data.data.trends);
      }
    } catch (error) {
      console.error('Error fetching trends:', error);
    }
  };

  const handleGenerateRoadmap = async () => {
    if (!formData.targetRole) {
      alert('Please enter a target role');
      return;
    }

    setLoading(true);
    try {
      const token = localStorage.getItem('token');
      const response = await fetch('http://localhost:5000/api/career/roadmap', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(formData)
      });

      const data = await response.json();
      if (data.success) {
        setRoadmapData(data.data);
      } else {
        alert(data.message || 'Failed to generate roadmap');
      }
    } catch (error) {
      console.error('Error generating roadmap:', error);
      alert('Failed to generate roadmap. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const fetchSkillsForRole = async (role, level) => {
    try {
      const token = localStorage.getItem('token');
      const response = await fetch(
        `http://localhost:5000/api/career/skills/${encodeURIComponent(role)}?level=${level}`, 
        {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        }
      );
      
      if (response.ok) {
        const data = await response.json();
        setSkills(data.data.requiredSkills || []);
      }
    } catch (error) {
      console.error('Error fetching skills:', error);
    }
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));

    if (name === 'targetRole' && value) {
      fetchSkillsForRole(value, formData.currentLevel);
    }
  };

  const ProgressBar = ({ progress, label }) => (
    <div className="progress-bar">
      <div className="progress-label">
        <span>{label}</span>
        <span>{progress}%</span>
      </div>
      <div className="progress-track">
        <div 
          className="progress-fill" 
          style={{ width: `${progress}%` }}
        ></div>
      </div>
    </div>
  );

  const MilestoneItem = ({ milestone, index }) => {
    const [completed, setCompleted] = useState(milestone.completed);

    const toggleComplete = async () => {
      // Mock toggle - in real app, this would update the backend
      setCompleted(!completed);
    };

    return (
      <div className={`milestone-item ${completed ? 'completed' : ''}`}>
        <div className="milestone-number">{index + 1}</div>
        <div className="milestone-content">
          <h4>{milestone.title}</h4>
          <p>{milestone.description}</p>
          <div className="milestone-date">
            Target: {new Date(milestone.targetDate).toLocaleDateString()}
          </div>
        </div>
        <button 
          className={`milestone-toggle ${completed ? 'completed' : ''}`}
          onClick={toggleComplete}
        >
          {completed ? '✓' : '○'}
        </button>
      </div>
    );
  };

  if (!roadmapData) {
    return (
      <div className="career-roadmap">
        <div className="roadmap-header">
          <h2>🎯 Career Roadmap Generator</h2>
          <p>Get a personalized career roadmap with skills, resources, and milestones tailored to your goals</p>
        </div>

        <div className="roadmap-form">
          <div className="form-card">
            <h3>Let's Plan Your Career Journey</h3>
            
            <div className="form-group">
              <label htmlFor="targetRole">Target Role *</label>
              <input
                type="text"
                id="targetRole"
                name="targetRole"
                value={formData.targetRole}
                onChange={handleInputChange}
                placeholder="e.g., Senior Software Developer, Data Scientist, Product Manager"
                required
              />
            </div>

            <div className="form-row">
              <div className="form-group">
                <label htmlFor="currentLevel">Current Level</label>
                <select
                  id="currentLevel"
                  name="currentLevel"
                  value={formData.currentLevel}
                  onChange={handleInputChange}
                >
                  <option value="Beginner">Beginner</option>
                  <option value="Intermediate">Intermediate</option>
                  <option value="Advanced">Advanced</option>
                  <option value="Expert">Expert</option>
                </select>
              </div>

              <div className="form-group">
                <label htmlFor="timeframe">Timeframe (months)</label>
                <select
                  id="timeframe"
                  name="timeframe"
                  value={formData.timeframe}
                  onChange={handleInputChange}
                >
                  <option value={6}>6 months</option>
                  <option value={12}>12 months</option>
                  <option value={18}>18 months</option>
                  <option value={24}>24 months</option>
                </select>
              </div>
            </div>

            {skills.length > 0 && (
              <div className="skills-preview">
                <h4>Skills for {formData.targetRole}:</h4>
                <div className="skills-tags">
                  {skills.map((skill, index) => (
                    <span key={index} className="skill-tag">{skill}</span>
                  ))}
                </div>
              </div>
            )}

            <button
              onClick={handleGenerateRoadmap}
              disabled={loading || !formData.targetRole}
              className="generate-btn"
            >
              {loading ? (
                <>
                  <div className="btn-spinner"></div>
                  Generating Roadmap...
                </>
              ) : (
                'Generate My Roadmap'
              )}
            </button>
          </div>

          <div className="info-cards">
            <div className="info-card">
              <div className="info-icon">📚</div>
              <h4>Curated Learning Resources</h4>
              <p>Get handpicked courses, tutorials, and certifications</p>
            </div>
            
            <div className="info-card">
              <div className="info-icon">🎯</div>
              <h4>Clear Milestones</h4>
              <p>Track your progress with achievable goals and deadlines</p>
            </div>
            
            <div className="info-card">
              <div className="info-icon">📈</div>
              <h4>Market Insights</h4>
              <p>Stay updated with industry trends and salary information</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="career-roadmap">
      <div className="roadmap-header">
        <h2>🎯 Your Career Roadmap</h2>
        <p>From {roadmapData.currentLevel} to {roadmapData.nextLevel} in {roadmapData.estimatedTimeframe} months</p>
        <button 
          className="new-roadmap-btn"
          onClick={() => setRoadmapData(null)}
        >
          Generate New Roadmap
        </button>
      </div>

      <div className="roadmap-content">
        <div className="roadmap-overview">
          <div className="journey-path">
            <div className="path-step current">
              <div className="step-circle">📍</div>
              <div className="step-label">Current: {roadmapData.currentLevel}</div>
            </div>
            <div className="path-arrow">→</div>
            <div className="path-step target">
              <div className="step-circle">🎯</div>
              <div className="step-label">Target: {roadmapData.nextLevel}</div>
            </div>
          </div>
        </div>

        <div className="roadmap-sections">
          <div className="section skills-section">
            <h3>🚀 Skills to Master</h3>
            <div className="skills-grid">
              {roadmapData.skillsToLearn.map((skill, index) => (
                <div key={index} className="skill-card">
                  <div className="skill-name">{skill}</div>
                  <div className="skill-progress">
                    <ProgressBar progress={Math.floor(Math.random() * 30)} label={skill} />
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="section resources-section">
            <h3>📚 Learning Resources</h3>
            <div className="resources-list">
              {roadmapData.resources.map((resource, index) => (
                <div key={index} className={`resource-item ${resource.priority}`}>
                  <div className="resource-type">
                    {resource.type === 'course' && '🎓'}
                    {resource.type === 'book' && '📖'}
                    {resource.type === 'tutorial' && '💻'}
                    {resource.type === 'certification' && '🏆'}
                  </div>
                  <div className="resource-content">
                    <h4>{resource.title}</h4>
                    <p>Type: {resource.type}</p>
                    <a 
                      href={resource.url} 
                      target="_blank" 
                      rel="noopener noreferrer"
                      className="resource-link"
                    >
                      Start Learning →
                    </a>
                  </div>
                  <div className={`priority-badge ${resource.priority}`}>
                    {resource.priority}
                  </div>
                </div>
              ))}
            </div>
          </div>

          <div className="section milestones-section">
            <h3>🎯 Milestones & Timeline</h3>
            <div className="milestones-list">
              {roadmapData.milestones.map((milestone, index) => (
                <MilestoneItem key={index} milestone={milestone} index={index} />
              ))}
            </div>
          </div>

          {trends && (
            <div className="section trends-section">
              <h3>📈 Market Insights</h3>
              <div className="trends-grid">
                <div className="trend-card">
                  <div className="trend-label">Job Growth</div>
                  <div className="trend-value green">{trends.demandGrowth}</div>
                </div>
                <div className="trend-card">
                  <div className="trend-label">Average Salary</div>
                  <div className="trend-value blue">{trends.averageSalary}</div>
                </div>
                <div className="trend-card">
                  <div className="trend-label">Remote Work</div>
                  <div className="trend-value purple">{trends.remoteWorkPercentage}</div>
                </div>
                <div className="trend-card">
                  <div className="trend-label">Job Openings</div>
                  <div className="trend-value orange">{trends.jobOpportunities.toLocaleString()}+</div>
                </div>
              </div>

              <div className="top-skills">
                <h4>Most In-Demand Skills:</h4>
                <div className="skills-tags">
                  {trends.topSkills.map((skill, index) => (
                    <span key={index} className="skill-tag popular">{skill}</span>
                  ))}
                </div>
              </div>

              <div className="emerging-trends">
                <h4>Emerging Trends:</h4>
                <ul>
                  {trends.emergingTrends.map((trend, index) => (
                    <li key={index}>{trend}</li>
                  ))}
                </ul>
              </div>
            </div>
          )}
        </div>

        <div className="action-panel">
          <div className="progress-summary">
            <h3>Your Progress</h3>
            <ProgressBar progress={25} label="Overall Career Progress" />
            <div className="progress-stats">
              <div className="stat">
                <span className="stat-value">0/{roadmapData.milestones.length}</span>
                <span className="stat-label">Milestones Completed</span>
              </div>
              <div className="stat">
                <span className="stat-value">{roadmapData.skillsToLearn.length}</span>
                <span className="stat-label">Skills to Learn</span>
              </div>
              <div className="stat">
                <span className="stat-value">{roadmapData.resources.length}</span>
                <span className="stat-label">Learning Resources</span>
              </div>
            </div>
          </div>

          <div className="action-buttons">
            <button className="btn-primary" onClick={handleDownloadPDF}>
              📱 Download Roadmap PDF
            </button>
            <button className="btn-secondary" onClick={handleEmailRoadmap}>
              📧 Email Roadmap
            </button>
            <button className="btn-tertiary" onClick={handleUpdateProgress}>
              🔄 Update Progress
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CareerRoadmap;